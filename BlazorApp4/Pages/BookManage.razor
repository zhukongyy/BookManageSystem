@page "/bookmanage"
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject INotificationService _notice
@using AntDesign
<div class="action-group">
    <Button Type="primary" OnClick="Load">加载</Button>
    <Button Type="primary" OnClick="@ShowModal">
        添加图书
    </Button>
    <Input Placeholder="ISBN Filter" AllowClear="true" OnChange="OnChange" TValue="string" @bind-Value="@isbnFilter" />
    <Input Placeholder="Author Filter" AllowClear="true" OnChange="OnChange" TValue="string" @bind-Value="@authorFilter" />
    <Input Placeholder="Title Filter" AllowClear="true" OnChange="OnChange" TValue="string" @bind-Value="@titleFilter" />
    <Input Placeholder="Category Filter" AllowClear="true" OnChange="OnChange" TValue="string" @bind-Value="@categoryFilter" />
</div>

<Modal Title="@("添加图书")"
       @bind-Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <AddBookForm @ref="form" />
</Modal>
<Table DataSource="showedBook" TItem="Book" RowClassName="@(_=>"editable-row")" Bordered TableLayout="fixed">
     <ChildContent Context="book">
         <Column TData="string" Title="ISBN">

             @book.Isbn

        </Column>
        <Column TData="string" Title="Book_Add_Date">

            @book.Book_Add_Date.ToString("yyyy-MM-dd")

        </Column>
        <Column TData="string" Title="Title">
            @if (!editCache[book.Isbn].edit)
            {
                @book.Title
            }
            else
            {
                <Input @bind-Value="editCache[book.Isbn].bookcache.Title" />
            }
        </Column>
        <Column TData="string" Title="Author">
            @if (!editCache[book.Isbn].edit)
            {
                @book.Author
            }
            else
            {
                <Input @bind-Value="editCache[book.Isbn].bookcache.Author" />
            }
        </Column>
        <Column TData="int" Title="Quantity">
            @if (!editCache[book.Isbn].edit)
            {
                @book.Quantity
            }
            else
            {
                <Input @bind-Value="editCache[book.Isbn].bookcache.Quantity" />
            }
        </Column>
        <Column TData="string" Title="Publisher">
            @if (!editCache[book.Isbn].edit)
            {
                @book.Publisher
            }
            else
            {
                <Input @bind-Value="editCache[book.Isbn].bookcache.Publisher" />
            }
        </Column>
        <Column TData="string" Title="Category">
            @if (!editCache[book.Isbn].edit)
            {
                @book.Category
            }
            else
            {
                <Input @bind-Value="editCache[book.Isbn].bookcache.Category" />
            }
        </Column>
        <ActionColumn Title="Action">
            @if (!editCache[book.Isbn].edit)
            {
                <a class="edit" @onclick="() => startEdit(book.Isbn)">Edit</a>
                <Popconfirm Title="Sure to delete?"
                            OnConfirm="() => DeleteBook(book.Isbn)"
                            OkText="Yes"
                            CancelText="No">
                    <a class="delete">Delete</a>
                </Popconfirm>
            }
            else
            {
                <Popconfirm Title="Sure to commit?"
                            OnConfirm="() => CommitEdit(book.Isbn)"
                            OkText="Yes"
                            CancelText="No">
                    <a class="save">Commit</a>
                </Popconfirm>
                <a @onclick="() => cancelEdit(book.Isbn)">Cancel</a>

            }
        </ActionColumn>
    </ChildContent>
</Table>

<style>
    .save {
        margin-right: 8px;
    }

    .action-group {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 10px; 
    }

    .edit {
        margin-right: 16px;
    }
</style>


@code {


    bool _visible = false;
    private AddBookForm form;

    private void ShowModal()
    {
        _visible = true;
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        bool c = await form.HandleSubmit();
        Task task;
        if (c == true)
        {

            task = NoticeModel.ShowNotification("添加成功", "添加图书成功", _notice, NotificationType.Success);
        }
        else
        {
            task = NoticeModel.ShowNotification("添加失败", "添加图书失败", _notice, NotificationType.Error);
        }
        await Load();
        StateHasChanged();
        _visible = false;
        await task;
    }
    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
    }


    private List<Book>? showedBook;
    private List<Book>? allBook;
    private async Task Load()
    {
        allBook = new List<Book>(await Http.GetFromJsonAsync<Book[]>("/book_query_All"));
        foreach (var book in allBook)
        {
            editCache[book.Isbn] = (false, book);
        }
        OnChange();
    }

    Dictionary<string, (bool edit, Book bookcache)> editCache = new();


    void startEdit(string isbn)
    {
        var data = editCache[isbn];
        editCache[isbn] = (true, data.bookcache); // add a copy in cache
    }

    void cancelEdit(string isbn)
    {
        var book = showedBook.FirstOrDefault(item => item.Isbn == isbn);
        editCache[isbn] = (false, book); // recovery
    }

    async void CommitEdit(string isbn)
    {
        var c = await Http.PostAsJsonAsync<Book>("/book_update", editCache[isbn].bookcache);
        if (c.IsSuccessStatusCode)
        {

            var index = showedBook.FindIndex(item => item.Isbn == isbn);
            showedBook[index] = editCache[isbn].bookcache; // apply the copy to data source
            editCache[isbn] = (false, showedBook[index]); // don't affect rows in editing
            var indexAll = allBook.FindIndex(item => item.Isbn == isbn);
            allBook.RemoveAt(indexAll);
            StateHasChanged();
            await NoticeModel.ShowNotification("更新成功", "更新成功", _notice, NotificationType.Success);
        }
        else
        {
            cancelEdit(isbn);
            StateHasChanged();
            await NoticeModel.ShowNotification("更新失败", "取消更新", _notice, NotificationType.Error);
        }
    }
    async void DeleteBook(string isbn)
    {
        var c = await Http.PostAsJsonAsync("/book_delete", new { isbn = isbn });
        if (c.IsSuccessStatusCode)
        {

            NoticeModel.ShowNotification("删除成功", "删除成功", _notice, NotificationType.Success);
            var index = showedBook.FindIndex(item => item.Isbn == isbn);
            showedBook.RemoveAt(index); // remove the book from the list
            editCache.Remove(isbn); // remove the book from the cache
            var indexAll = allBook.FindIndex(item => item.Isbn == isbn);
            allBook.RemoveAt(indexAll);
            StateHasChanged();
        }
        else
        {
            await NoticeModel.ShowNotification("删除失败", "删除失败", _notice, NotificationType.Error);
        }
    }

    private string authorFilter="";
    private string isbnFilter="";
    private string titleFilter="";
    private string categoryFilter = "";
    void OnChange()
    {
        Console.WriteLine(authorFilter);
        if (allBook == null || allBook.Count == 0)
        {
            return;
        }
        IEnumerable<Book> c=allBook;
        if (isbnFilter != "")
        {
            c= c.Where(book => book.Isbn.Contains(isbnFilter));
        }
        if (authorFilter != "")
        {
            c = c.Where(book => book.Author.Contains(authorFilter));
        }
        if (titleFilter != "")
        {
            c = c.Where(book => book.Title.Contains(titleFilter));
        }
        if (categoryFilter != "")
        {
            c = c.Where(book => book.Category.Contains(categoryFilter));
        }
        showedBook = c.ToList<Book>();
    }
    protected override async Task OnInitializedAsync()
    {
        await Load();
    }
}